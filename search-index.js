var searchIndex = {};
searchIndex['cayley'] = {"items":[[0,"","cayley","<style>ul a { color: #4e8bca; }</style>"],[0,"errors","",""],[2,"GraphRequestError","cayley::errors",""],[12,"InvalidUrl","","",0],[12,"MalformedRequest","","",0],[12,"RequestFailed","","",0],[12,"DecodingFailed","","",0],[12,"ResponseParseFailed","","",0],[12,"QueryNotFinalized","","",0],[12,"QueryCompilationFailed","","",0],[12,"ReusableCannotBeSaved","","",0],[4,"GraphResult","",""],[10,"fmt","","",0],[0,"selector","cayley",""],[2,"NodeSelector","cayley::selector",""],[12,"AnyNode","","",1],[12,"Node","","",1],[12,"Nodes","","",1],[2,"PredicateSelector","",""],[12,"AnyPredicate","","",2],[12,"Predicate","","",2],[12,"Predicates","","",2],[12,"Query","","",2],[2,"TagSelector","",""],[12,"AnyTag","","",3],[12,"Tag","","",3],[12,"Tags","","",3],[0,"path","cayley",""],[1,"Vertex","cayley::path","An interface to a Path with the ability to be executed as a query to a database.\nThe main entry point to ask for [GraphNodes](./struct.GraphNodes.html) from database using [Graph](./struct.Graph.html) as an interceptor."],[1,"Morphism","","An interface to a Path with the ability to be saved and reused to\nconstruct other Paths, but not to query anything."],[6,"Compile","","Marks any Path which is able to be compiled to a string Gremlin-compatible query"],[9,"add_str","","",4],[9,"add_string","","",4],[9,"compile","","",4],[6,"Path","","The trait which covers all the methods from [Gremlin API](https://github.com/google/cayley/blob/master/docs/GremlinAPI.md)\nPath specification, but in a Rust way."],[10,"Out","","`.Out` Path method. Follow forwards the quads with given predicates.",5],[10,"OutP","","`OutP`, an alias for `Out(<Predicate>, AnyTag)`",5],[10,"OutT","","`OutT`, an alias for `Out(AnyPredicate, <Tag>)`",5],[10,"In","","`.In` Path method. Follow backwards the quads with given predicates.",5],[10,"InP","","`InP`, an alias for `In(<Predicate>, AnyTag)`",5],[10,"InT","","`InT`, an alias for `In(AnyPredicate, <Tag>)`",5],[10,"Both","","`.Both` Path method.",5],[10,"BothP","","`BothP`, an alias for `Both(<Predicate>, AnyTag)`",5],[10,"BothT","","`BothT`, an alias for `Both(AnyPredicate, <Tag>)`",5],[10,"Is","","`.Is` Path method. Filter all paths which are on the given node(-s).",5],[10,"Has","","`.Has` Path method. Filter all paths which are on the subject, but do not follow the path.",5],[10,"HasP","","`HasP`, an alias for `Has(<Predicate>, AnyNode)`",5],[10,"HasN","","`HasN`, an alias for `Has(AnyPredicate, <Node>)`",5],[10,"Tag","","`.Tag`, an alias for `.As`",5],[10,"As","","`.As` Path method. Mark items with a tag.",5],[10,"Back","","`.Back` Path method. Follow backwards the tagged quads.",5],[10,"Save","","`.Save` Path method. Save all quads with predicate into tag, without traversal.",5],[10,"SaveP","","`SaveP`, an alias for `Save(<Predicate>, AnyTag)`",5],[10,"SaveT","","`SaveT`, an alias for `Save(AnyPredicate, <Tag>)`",5],[10,"Intersect","","`.Intersect`, an alias for `.And`",5],[10,"And","","`.And` Path method. Intersect the results from one query with another.",5],[10,"Union","","`.Union`, an alias for `.Or`",5],[10,"Or","","`.Or` Path method. Join the results from one query with another.",5],[10,"Follow","","`.Follow` Path method. Applies the path chain on the `Morphism` object to the current path.",5],[10,"FollowR","","`.FollowR` Path method. Applies the path chain on the `Morphism` object to the current path.",5],[6,"Query","",""],[9,"set_finalized","","",6],[9,"is_finalized","","",6],[10,"All","","`.All` Query method. Equivalent to Gremlin `Query.All()`.\nReturns all the items found within this path.",6],[10,"GetLimit","","`.GetLimit` Query method. Equivalent to Gremlin `Query.GetLimit(<number>)`.\nReturns first `<n>` items found within this path.",6],[6,"Reuse","",""],[9,"get_name","","Get a prepared name for this Reusable",7],[9,"set_saved","","",7],[9,"is_saved","","Was this item saved at least once in _some_ graph during this session.",7],[10,"save","","",7],[10,"save_as","","",7],[10,"start","","Create a Vertex instance and start a query from [NodeSelector](./selector/struct.NodeSelector.html)",8],[10,"prepare","","Prepare a vertex instance to specify a query later. Ensure to start a query with `.From()` method\nif you use `prepare()`.",8],[10,"From","","A method for postponed query creation, intended to be used after the `prepare()` method\non the same Vertex instance.",8],[10,"add_str","","",8],[10,"add_string","","",8],[10,"compile","","",8],[10,"set_finalized","","",8],[10,"is_finalized","","",8],[10,"clone","","",8],[10,"start","","Create a Morphism instance with intention to store it in database under the given name",9],[10,"add_str","","",9],[10,"add_string","","",9],[10,"compile","","",9],[10,"get_name","","",9],[10,"set_saved","","",9],[10,"is_saved","","",9],[10,"clone","","",9],[0,"graph","cayley",""],[1,"Graph","cayley::graph","Provides access to currently running Cayley database, among with\nan ability to run queries there, and to write there your data\n(honestly, only if there's a `graph.emit()` method belowâ€”if not,\nit will just soon be there)."],[1,"GraphNode","","A wrapper for a single item Cayley returned in response for a query"],[1,"GraphNodes","","A collection of GraphNode instances"],[2,"CayleyAPIVersion","","Cayley API Version, planned to default to the latest, if it will ever change"],[12,"V1","","",10],[12,"DefaultVersion","","",10],[10,"default","","Create a Graph which connects to the latest API at `localhost:64210`",11],[10,"new","","Create a Graph which connects to the host you specified manually",11],[10,"find","","Find nodes with the Query implementation (say, Vertex-path) and return them parsed",11],[10,"exec","","Find nodes using raw pre-compiled query string and return them parsed",11],[10,"save","","Save Morphism or any [Reuse](./path/trait.Reuse.html) implementor in the\ndatabase, equivalent to Gremin's `var foo = g.Morphism()...`",11],[10,"save_as","","Save Morphism or any [Reuse](./path/trait.Reuse.html) implementor in the\ndatabase, under the different name than the one used when it was created",11],[10,"decode","","",12],[10,"decode","","",13]],"paths":[[2,"GraphRequestError"],[2,"NodeSelector"],[2,"PredicateSelector"],[2,"TagSelector"],[6,"Compile"],[6,"Path"],[6,"Query"],[6,"Reuse"],[1,"Vertex"],[1,"Morphism"],[2,"CayleyAPIVersion"],[1,"Graph"],[1,"GraphNode"],[1,"GraphNodes"]]};
initSearch(searchIndex);
